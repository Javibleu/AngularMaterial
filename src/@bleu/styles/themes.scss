@use "@angular/material" as mat;
@use "sass:map";

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

/* Create a base theme without color.
    This will globally set the density and typography for all future color themes. */
@include mat.all-component-themes(
  (
    color: null,
    density: -2,
    typography:
      mat.define-typography-config(
        $font-family: theme("fontFamily.sans"),
        $body-2: mat.define-typography-level(0.875rem, 1.5rem, 600),
        $button: mat.define-typography-level(0.875rem, 0.875rem, 400)
      ),
  )
);

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$bleu-primary: mat.define-palette(mat.$blue-palette);
$bleu-accent: mat.define-palette( mat.$pink-palette, A200, A100, A400);
$bleu-warn: mat.define-palette(mat.$red-palette);


$bleu-theme: mat.define-light-theme(
(   density: 0,
    color: (
      primary: $bleu-primary,
      accent: $bleu-accent,
      warn: $bleu-warn,
    ),
   )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($bleu-theme);

/* You can add global styles to this file, and also import other style files */
// body.theme-two{

//     $bleu-primary: mat.define-palette(mat.$blue-palette);
//     $bleu-secondary: mat.define-palette(mat.$deep-purple-palette);

//     $light-theme: mat.define-light-theme(  
//         (
//         density: -2,
//             color: (
//               primary: $bleu-primary,
//               accent: $bleu-secondary,
//               warn: $bleu-warn,
//             ),
//            )
//         );

//     @include mat.all-component-colors($light-theme);
// }



//**********************************************************************************
$palettes: ();
@each $name in (primary, accent, warn) {
    $palettes: map.merge($palettes, (#{$name}: (
        50: var(--bleu-#{$name}-50),
        100: var(--bleu-#{$name}-100),
        200: var(--bleu-#{$name}-200),
        300: var(--bleu-#{$name}-300),
        400: var(--bleu-#{$name}-400),
        500: var(--bleu-#{$name}-500),
        600: var(--bleu-#{$name}-600),
        700: var(--bleu-#{$name}-700),
        800: var(--bleu-#{$name}-800),
        900: var(--bleu-#{$name}-900),
        contrast: (
            50: var(--bleu-on-#{$name}-50),
            100: var(--bleu-on-#{$name}-100),
            200: var(--bleu-on-#{$name}-200),
            300: var(--bleu-on-#{$name}-300),
            400: var(--bleu-on-#{$name}-400),
            500: var(--bleu-on-#{$name}-500),
            600: var(--bleu-on-#{$name}-600),
            700: var(--bleu-on-#{$name}-700),
            800: var(--bleu-on-#{$name}-800),
            900: var(--bleu-on-#{$name}-900)
        ),
        default: var(--bleu-#{$name}),
        lighter: var(--bleu-#{$name}-100),
        darker: var(--bleu-#{$name}-700),
        text: var(--bleu-#{$name}),
        default-contrast: var(--bleu-on-#{$name}),
        lighter-contrast: var(--bleu-on-#{$name}-100),
        darker-contrast: var(--bleu-on-#{$name}-700)
    )));
}


body.light,
body .light {
    $base-light-theme: mat.define-light-theme(( color: ($palettes)));
    
    $light-theme: (
        color: (
            primary: map.get(map.get($base-light-theme, color), primary),
            accent: map.get(map.get($base-light-theme, color), accent),
            warn: map.get(map.get($base-light-theme, color), warn),
            is-dark: map.get(map.get($base-light-theme, color), is-dark),
            foreground: (
                base: #000000,
                divider: #E2E8F0, /* slate.200 */
                dividers: #E2E8F0, /* slate.200 */
                disabled: #94A3B8, /* slate.400 */
                disabled-button: #94A3B8, /* slate.400 */
                disabled-text: #94A3B8, /* slate.400 */
                elevation: #000000,
                hint-text: #94A3B8, /* slate.400 */
                secondary-text: #64748B, /* slate.500 */
                icon: #64748B, /* slate.500 */
                icons: #64748B, /* slate.500 */
                mat-icon: #64748B, /* slate.500 */
                text: #1E293B, /* slate.800 */
                slider-min: #1E293B, /* slate.800 */
                slider-off: #CBD5E1, /* slate.300 */
                slider-off-active: #94A3B8 /* slate.400 */
            ),
            background: (
                status-bar: #CBD5E1, /* slate.300 */
                app-bar: #FFFFFF,
                background: #F1F5F9, /* slate.100 */
                hover: rgba(148, 163, 184, 0.12), /* slate.400 + opacity */
                card: #FFFFFF,
                dialog: #FFFFFF,
                disabled-button: rgba(148, 163, 184, 0.38), /* slate.400 + opacity */
                raised-button: #FFFFFF,
                focused-button: #64748B, /* slate.500 */
                selected-button: #E2E8F0, /* slate.200 */
                selected-disabled-button: #E2E8F0, /* slate.200 */
                disabled-button-toggle: #CBD5E1, /* slate.300 */
                unselected-chip: #E2E8F0, /* slate.200 */
                disabled-list-option: #CBD5E1, /* slate.300 */
                tooltip: #1E293B /* slate.800 */
            )
        )
    );

    @debug $light-theme;

    /* Use all-component-colors to only generate the colors */
    @include mat.all-component-colors($light-theme);
}